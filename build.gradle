/*
 * Copyright 2024 Curity AB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 *  limitations under the License.
 */

plugins {
    id 'java-library'
    id 'groovy'
}

group = 'io.curity.identityserver.plugins'
description = 'Curity Plugin Description'
if (project.hasProperty('releaseVersion')) {
    project.version = project.releaseVersion
} else {
    project.version = '0.0.1'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compileOnly 'se.curity.identityserver:identityserver.sdk:10.4.0'
    compileOnly 'org.slf4j:slf4j-api:2.0.12'

    testImplementation 'se.curity.identityserver:identityserver.sdk:10.4.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'org.spockframework:spock-core:2.4-M4-groovy-4.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "started", "passed", "skipped", "failed"
    }
}

// Configure JAR manifest
jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Build-Jdk': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Created-By': "Gradle ${gradle.gradleVersion}"
        )
    }
}


// Custom task for local deployment
tasks.register('deployToLocal', Sync) {
    description = 'Deploys the plugin JAR to the local Curity server'
    dependsOn jar

    doFirst {
        logger.info('Starting deployToLocal task')
        if (!System.getenv('IDSVR_HOME')) {
            throw new GradleException('IDSVR_HOME environment variable must be set to deploy the plugin')
        }
    }

    from(jar) {
        eachFile { file ->
            logger.info("Copying plugin JAR: ${file.path}")
        }
    }

    def pluginDir = file("${System.env.IDSVR_HOME}/usr/share/plugins/${project.group}.${project.name}")
    doLast {
        logger.info("Deploying to: ${pluginDir}")
        into(pluginDir)
        logger.lifecycle("Successfully deployed plugin to ${pluginDir}")
    }

}


// Custom task for creating release
tasks.register('createRelease', Sync) {
    description = 'Creates a release package with all necessary artifacts'
    dependsOn build, jar

    from configurations.runtimeClasspath
    from jar

    into layout.buildDirectory.dir('release')

    doFirst {
        logger.info('Starting createRelease task')
        logger.info("Release version: ${project.version}")
    }

    doLast {
        logger.lifecycle("Release package created at: ${destinationDir}")
        logger.info("Included artifacts:")
        destinationDir.eachFile { file ->
            logger.info("- ${file.name}")
        }
    }
}
